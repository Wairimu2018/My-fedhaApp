var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name Sensors
 * @description
 * This plugin enables sensors on Android devices
 *
 * @usage
 * ```typescript
 * import { Sensors, TYPE_SENSOR } from '@ionic-native/sensors';
 *
 *
 * constructor(private sensors: Sensors) { }
 *
 * ...
 *
 *
 * this.sensors.enableSensor(TYPE_SENSOR.LIGHT);
 *
 * ```
 */
var Sensors = (function (_super) {
    __extends(Sensors, _super);
    function Sensors() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This function enables the sensor
     * @param {string} TYPE_SENSOR Specify the sensor to enable
     * @return {Promise<any>} Returns a promise that resolves when something happens
     */
    /**
       * This function enables the sensor
       * @param {string} TYPE_SENSOR Specify the sensor to enable
       * @return {Promise<any>} Returns a promise that resolves when something happens
       */
    Sensors.prototype.enableSensor = /**
       * This function enables the sensor
       * @param {string} TYPE_SENSOR Specify the sensor to enable
       * @return {Promise<any>} Returns a promise that resolves when something happens
       */
    function (TYPE_SENSOR) {
        return;
    };
    /**
     * This function disables the sensor
     * @return {Promise<any>} Returns a promise that resolves when something happens
     */
    /**
       * This function disables the sensor
       * @return {Promise<any>} Returns a promise that resolves when something happens
       */
    Sensors.prototype.disableSensor = /**
       * This function disables the sensor
       * @return {Promise<any>} Returns a promise that resolves when something happens
       */
    function () {
        return;
    };
    /**
     * This function calls the success callback
     * @return {Promise<any>} Returns sensor state
     */
    /**
       * This function calls the success callback
       * @return {Promise<any>} Returns sensor state
       */
    Sensors.prototype.getState = /**
       * This function calls the success callback
       * @return {Promise<any>} Returns sensor state
       */
    function () {
        return;
    };
    Sensors.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], Sensors.prototype, "enableSensor", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Sensors.prototype, "disableSensor", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Sensors.prototype, "getState", null);
    /**
     * @name Sensors
     * @description
     * This plugin enables sensors on Android devices
     *
     * @usage
     * ```typescript
     * import { Sensors, TYPE_SENSOR } from '@ionic-native/sensors';
     *
     *
     * constructor(private sensors: Sensors) { }
     *
     * ...
     *
     *
     * this.sensors.enableSensor(TYPE_SENSOR.LIGHT);
     *
     * ```
     */
    Sensors = __decorate([
        Plugin({
            pluginName: 'Sensors',
            plugin: 'https://github.com/fabiorogeriosj/cordova-plugin-sensors.git',
            pluginRef: 'sensors',
            repo: 'https://github.com/fabiorogeriosj/cordova-plugin-sensors.git',
            platforms: ['Android'],
        })
    ], Sensors);
    return Sensors;
}(IonicNativePlugin));
export { Sensors };
//# sourceMappingURL=index.js.map